/*	
 	https://stackjava.com/design-pattern/abstract-factory-pattern.html
	N·∫øu b·∫°n ƒë√£ quen v·ªõi  Factory Pattern th√¨ b·∫°n s·∫Ω th·∫•y n√≥ ch·ªâ c√≥ 1 Factory class, factory class n√†y s·∫Ω tr·∫£ v·ª? c√°c class con (sub-class) d·ª±a tr√™n d·∫ßu v√†o (factory class s·ª≠ d·ª•ng if-else ho·∫∑c switch ƒë·ªÉ x√°c ƒë·ªãnh class con ƒë·∫ßu ra).

	Trong Abstract Factory pattern, ch√∫ng ta kh√¥ng c·∫ßn if-else ho·∫∑c switch. M·ªói sub-class s·∫Ω c√≥ m·ªôt factory class. Abstract Factory class s·∫Ω tr·∫£ v·ª? sub-class d·ª±a tr√™n ƒë·∫ßu v√†o l√† factory class.

	M·ªôt s·ªë v√≠ d·ª• v·ª? Abstract Factory trong JDK:
	javax.xml.parsers.DocumentBuilderFactory#newInstance()
	javax.xml.transform.TransformerFactory#newInstance()
	javax.xml.xpath.XPathFactory#newInstance()
	 L·ª£i √≠ch c·ªßa Abstract Factory Pattern.
	Abstract Factory pattern cung c·∫•p h∆∞·ª°ng ti·∫øp c·∫≠n code b·∫±ng interface thay v√¨ c√°c c√†i ƒë·∫∑t (Gi·ªëng v·ªõi Factory Pattern)
	Abstract Factory pattern l√† ‚Äúfactory c·ªßa c√°c factory‚Ä? v√† c√≥ th·ªÉ d·ªÖ d·∫°ng m·ªü r·ªông ƒë·ªÉ ch·ª©a th√™m c√°c factory v√† c√°c sub-class
	Abstract Factory gi√∫p tr√°nh ƒë∆∞·ª£c vi·ªác s·ª≠ d·ª•ng ƒëi·ª?u ki·ªán logic nh∆∞ b√™n trong Factory Pattern.
*/
package example.parttern.creational.abstractfactory;

import example.parttern.creational.factory.Computer;

public class TestAbstractFactory {
	public static void main(String[] args) {
		testAbstractFactory();
	}

	private static void testAbstractFactory() {
		Computer pc = ComputerFactory.getComputer(new PCFactory("2 GB", "500 GB", "2.4 GHz"));
		Computer server = ComputerFactory.getComputer(new ServerFactory("16 GB", "1 TB", "2.9 GHz"));
		System.out.println("AbstractFactory PC Config::" + pc);
		System.out.println("AbstractFactory Server Config::" + server);
	}
}
