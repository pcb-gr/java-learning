//1. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng c·ªßa ch√≠nh l·ªõp ƒë√≥ c√≥ thu·ªôc t√≠nh private static.
//2. T·∫°o m·ªôt private constructor ƒë·ªÉ l·ªõp n√†y kh√¥ng th·ªÉ kh·ªüi t·∫°o b·ªüi c√°c ƒë·ªëi t∆∞·ª£ng ·ªü ngo√†i b·∫£n th√¢n class ƒë√≥.
//3. T·∫°o m·ªôt method t√™n l√† getInstance() (Ohhhhh, Ok, b·∫•t c·ª© t√™n g√¨ ch√∫ng ta mu·ªën) v√† tr·∫£ v·ª? ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c khai b√°o ·ªü b∆∞·ªõc 1.
//https://medium.com/@huynhquangthao/m%E1%BA%ABu-thi%E1%BA%BFt-k%E1%BA%BF-singleton-5997128c71b9
//https://viblo.asia/p/tong-hop-mot-so-design-pattern-trong-java-qzaGzZWRGyO
package example.parttern.creational.singleton;

/*
	T·∫°o th·ªÉ hi·ªán c·ªßa Class Singleton trong method access.
	C√°ch n√†y c√≥ nh∆∞·ª£c ƒëi·ªÉm l√† kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng trong tr∆∞·ª?ng h·ª£p c√≥ nhi·ª?u thread,
	gi·∫£ s·ª≠ c√≥ nhi·ª?u thread c√πng l√∫c g·ª?i method getInstance() s·∫Ω c√≥ nhi·ª?u th·ªÉ hi·ªán kh√°c nhau ƒë∆∞·ª£c t·∫°o.
*/

public class LazyInitializedSingleton {
	// private static instance
	private static LazyInitializedSingleton sInstance;

	// private constructor for prevent outside initialization
	private LazyInitializedSingleton() {
	}

	// static getter
	public static LazyInitializedSingleton getInstance() {
		if (sInstance == null) {
			sInstance = new LazyInitializedSingleton();
		}
		return sInstance;
	}
}
